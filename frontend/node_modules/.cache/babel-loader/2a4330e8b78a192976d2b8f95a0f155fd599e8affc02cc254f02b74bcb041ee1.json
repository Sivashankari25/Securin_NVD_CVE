{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './cveDetails.css';\n\n// const CveDetail = () => {\n//     const { cveId } = useParams();\n//     const [cveData, setCveData] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchCveDetail = async () => {\n//             try {\n//                 const response = await fetch(`http://localhost:5000/api/cves/${cveId}`);\n//                 if (!response.ok) {\n//                     throw new Error(`API call failed with status ${response.status}`);\n//                 }\n\n//                 const data = await response.json();\n//                 setCveData(data);\n//                 console.log(data)\n//             } catch (err) {\n//                 setError(err.message);\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         fetchCveDetail();\n//     }, [cveId]);\n\n//     if (isLoading) return <p>Loading... <br /><br />Please wait for a while.</p>;\n//     if (error) return <p style={{ color: 'red' }}>{error}</p>;\n\n//     return (\n//         <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n//             <h1 style={{ textAlign: 'center' }}>CVE Detail: {cveId}</h1>\n//             {cveData ? (\n//                 <div>\n//                     <section>\n//                         <h2>Description:</h2>\n//                         <p>{cveData.descriptions[0].value}</p>\n//                         <section>\n//                             <h2>CVSS V2 Metrics:</h2>\n//                             <div>\n//                                 <p><strong>Severity:</strong> {cveData.metrics.cvssMetricV2.baseSeverity || \"N/A\"} <br />\n//                                 <strong>Score:</strong> {cveData.metrics.cvssMetricV2.cvssData.baseScore || \"N/A\"}\n//                                 <br />\n//                                 <strong>Vector String:</strong> {cveData.cvssMetrics.vectorString || \"N/A\"}</p>\n//                             </div>\n//                         </section>\n//                         {cveData.cvssMetrics.map((metric, index) => (\n//                            <table key={index} style={{ width: '100%', border: '2px solid black', marginBottom: '20px', borderCollapse: 'collapse' }}>\n//                            <thead>\n//                                <tr>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Access Vector</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Access Complexity</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Authentication</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Confidentiality Impact</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Integrity Impact</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Availability Impact</th>\n//                                </tr>\n//                            </thead>\n//                            <tbody>\n//                                <tr>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.accessVector}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.accessComplexity}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.authentication}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.confidentialityImpact}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.integrityImpact}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.availabilityImpact}</td>\n//                                </tr>\n//                            </tbody>\n//                        </table>\n\n//                         ))}\n//                     </section>\n\n//                     <section>\n//                         <h2>Scores:</h2>\n//                         {cveData.metrics.cvssMetricV2.map((metric, index) => (\n//                             <div>\n//                                 <p><strong>Exploitability Score:</strong> {metric.exploitabilityScore}</p>\n//                                 <p><strong>Impact Score:</strong> {metric.impactScore}</p>\n//                             </div>\n//                         ))}\n//                     </section>\n\n//                     <section>\n//                         <h2>CPE:</h2>\n//                         {cveData.configurations.map((config, idx) => (\n//                             <table key={idx} style={{ width: '100%', border: '2px solid black', marginBottom: '20px', borderCollapse: 'collapse' }}>\n//                             <thead>\n//                                 <tr>\n//                                     <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Criteria</th>\n//                                     <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Match Criteria ID</th>\n//                                     <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Vulnerable</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody>\n//                                 {config.nodes.map((node, index) =>\n//                                     node.cpeMatch.map((cpe, i) => (\n//                                         <tr key={`${index}-${i}`}>\n//                                             <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{cpe.criteria}</td>\n//                                             <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{cpe.matchCriteriaId}</td>\n//                                             <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{cpe.vulnerable ? 'Yes' : 'No'}</td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                         </table>\n\n//                         ))}\n//                     </section>\n\n//                 </div>\n//             ) : (\n//                 <p>No data available for this CVE.</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default CveDetail;","map":{"version":3,"names":[],"sources":["D:/mohit/securin_assignment1/react-frontend/src/CveDetail.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { useParams } from 'react-router-dom';\n// import './cveDetails.css';\n\n// const CveDetail = () => {\n//     const { cveId } = useParams();\n//     const [cveData, setCveData] = useState(null);\n//     const [isLoading, setIsLoading] = useState(true);\n//     const [error, setError] = useState(null);\n\n//     useEffect(() => {\n//         const fetchCveDetail = async () => {\n//             try {\n//                 const response = await fetch(`http://localhost:5000/api/cves/${cveId}`);\n//                 if (!response.ok) {\n//                     throw new Error(`API call failed with status ${response.status}`);\n//                 }\n\n//                 const data = await response.json();\n//                 setCveData(data);\n//                 console.log(data)\n//             } catch (err) {\n//                 setError(err.message);\n//             } finally {\n//                 setIsLoading(false);\n//             }\n//         };\n\n//         fetchCveDetail();\n//     }, [cveId]);\n\n//     if (isLoading) return <p>Loading... <br /><br />Please wait for a while.</p>;\n//     if (error) return <p style={{ color: 'red' }}>{error}</p>;\n\n//     return (\n//         <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n//             <h1 style={{ textAlign: 'center' }}>CVE Detail: {cveId}</h1>\n//             {cveData ? (\n//                 <div>\n//                     <section>\n//                         <h2>Description:</h2>\n//                         <p>{cveData.descriptions[0].value}</p>\n//                         <section>\n//                             <h2>CVSS V2 Metrics:</h2>\n//                             <div>\n//                                 <p><strong>Severity:</strong> {cveData.metrics.cvssMetricV2.baseSeverity || \"N/A\"} <br />\n//                                 <strong>Score:</strong> {cveData.metrics.cvssMetricV2.cvssData.baseScore || \"N/A\"}\n//                                 <br />\n//                                 <strong>Vector String:</strong> {cveData.cvssMetrics.vectorString || \"N/A\"}</p>\n//                             </div>\n//                         </section>\n//                         {cveData.cvssMetrics.map((metric, index) => (\n//                            <table key={index} style={{ width: '100%', border: '2px solid black', marginBottom: '20px', borderCollapse: 'collapse' }}>\n//                            <thead>\n//                                <tr>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Access Vector</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Access Complexity</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Authentication</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Confidentiality Impact</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Integrity Impact</th>\n//                                    <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Availability Impact</th>\n//                                </tr>\n//                            </thead>\n//                            <tbody>\n//                                <tr>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.accessVector}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.accessComplexity}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.authentication}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.confidentialityImpact}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.integrityImpact}</td>\n//                                    <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{metric.availabilityImpact}</td>\n//                                </tr>\n//                            </tbody>\n//                        </table>\n                       \n//                         ))}\n//                     </section>\n\n//                     <section>\n//                         <h2>Scores:</h2>\n//                         {cveData.metrics.cvssMetricV2.map((metric, index) => (\n//                             <div>\n//                                 <p><strong>Exploitability Score:</strong> {metric.exploitabilityScore}</p>\n//                                 <p><strong>Impact Score:</strong> {metric.impactScore}</p>\n//                             </div>\n//                         ))}\n//                     </section>\n\n//                     <section>\n//                         <h2>CPE:</h2>\n//                         {cveData.configurations.map((config, idx) => (\n//                             <table key={idx} style={{ width: '100%', border: '2px solid black', marginBottom: '20px', borderCollapse: 'collapse' }}>\n//                             <thead>\n//                                 <tr>\n//                                     <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Criteria</th>\n//                                     <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Match Criteria ID</th>\n//                                     <th style={{ border: '2px solid black', fontWeight: 'bold' }}>Vulnerable</th>\n//                                 </tr>\n//                             </thead>\n//                             <tbody>\n//                                 {config.nodes.map((node, index) =>\n//                                     node.cpeMatch.map((cpe, i) => (\n//                                         <tr key={`${index}-${i}`}>\n//                                             <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{cpe.criteria}</td>\n//                                             <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{cpe.matchCriteriaId}</td>\n//                                             <td style={{ border: '2px solid black', fontWeight: 'bold' }}>{cpe.vulnerable ? 'Yes' : 'No'}</td>\n//                                         </tr>\n//                                     ))\n//                                 )}\n//                             </tbody>\n//                         </table>\n                        \n//                         ))}\n//                     </section>\n\n//                 </div>\n//             ) : (\n//                 <p>No data available for this CVE.</p>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default CveDetail;\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}